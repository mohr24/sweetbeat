<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// setup

timing_list = ds_list_create();

running_time = 0;

test_started = false;
test_runtime = 30*room_speed;   // 30 seconds
test_interval = floor(.75*room_speed);   // every .75 seconds

test_deviation_tolerance = 15;  // 15 frames of tolerance
test_certainty_tolerance = floor(.8*(test_runtime/test_interval));  // 80% good data points
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// finalize results

var t = 0;

var off_sum = 0;
var off_count = 0;

for (var i = 0; i &lt; ds_list_size(timing_list); i++)
{
    var time = ds_list_find_value(timing_list, i);
    if (round(time / test_interval) &gt; t)
    {
        t = round(time / test_interval);
        var off = time - (t*test_interval);
        off_sum += off;
        off_count++;
    }
}
if (off_count &gt; 0)
{
    var off_avg = off_sum / off_count;
    off_sum = 0;
    off_count = 0;
    t = 0;
    for (var i = 0; i &lt; ds_list_size(timing_list); i++)
    {
        var time = ds_list_find_value(timing_list, i);
        if (round(time / test_interval) &gt; t)
        {
            t = round(time / test_interval);
            var off = time - (t*test_interval);
            if (abs(off_avg - off) &lt; test_deviation_tolerance)
            {
                off_sum += off;
                off_count++;
            }
        }
    }
    if (off_count &gt; test_certainty_tolerance)
    {
        off_avg = round(off_sum / off_count);
        obj_lag.audio_lag = off_avg;
        show_debug_message("Audio lag:");
        show_debug_message(off_avg);
    }
    else
        show_debug_message("ERROR: bad audio lag results"); // do something?
}
else
    show_debug_message("ERROR: no data collected for audio lag");
    
ds_list_destroy(timing_list);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// do test

running_time++;
if (running_time % test_interval == 0)
    audio_play_sound(snd_down_beat,10,false);
if (test_started)
{
    if (keyboard_check_pressed(vk_space))
        ds_list_add(timing_list, running_time);
    if (running_time &gt; test_runtime)
        instance_destroy();
}
else
{
    if (keyboard_check_pressed(vk_space))
    {
        test_started = true;
        if (running_time &lt; test_interval / 2)
            running_time += test_interval;
        ds_list_add(timing_list, running_time);
    }
    else if (running_time &gt; test_interval)
        running_time -= test_interval;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

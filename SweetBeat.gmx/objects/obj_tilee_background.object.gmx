<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>500</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variable initialization

background_color = c_black;

parallax_factor = 0.15;

tile_width = 118;
tile_height = 118;
total_width = 128;
total_height = 128;

transition_frames = 5;
transition_count = 0;

seed_get = 999999999;   // arbitrary high number

seed = random(seed_get);
prev_seed = seed;

tile_x = ceil((room_width*(parallax_factor+1)) / tile_width);
tile_y = ceil((room_height*(parallax_factor+1)) / tile_height);


color_picker[0] = make_color_rgb(244,165,255);
color_picker[1] = make_color_rgb(234,83,255);
color_picker[2] = make_color_rgb(224,5,255);
color_picker[3] = make_color_rgb(196,0,223);
color_picker[4] = make_color_rgb(135,0,154);

initial = true;
was_initial = true;
initial_color = make_color_rgb(46,46,46);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// check for background re-roll
    
if (obj_manager.command_bitmask != 0)
{
    prev_seed = seed;
    seed = random(seed_get);
    transition_count = transition_frames;
}

if (transition_count == 1)
    initial = false;

if (transition_count &gt; 0)
    transition_count -= 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw the entire background

var view_l = view_xview[view_current];
var view_r = view_l + view_wview[view_current];
var view_u = view_yview[view_current];
var view_b = view_u + view_hview[view_current];

var px_offset = -view_l * parallax_factor;
var py_offset = -view_u * parallax_factor;

view_l -= px_offset;
view_r -= px_offset;
view_u -= py_offset;
view_b -= py_offset;

var ix_min = floor(view_l / total_width);
var ix_max = ceil(view_r / total_width);
var iy_min = floor(view_u / total_height);
var iy_max = ceil(view_b / total_height);

var lerp_fac = 1 - (transition_count / transition_frames);
if (initial &amp;&amp; transition_count == 0)
    lerp_fac = 0;
    
var x_min = ix_min*total_width + px_offset;
var y_min_start = iy_min*total_height + py_offset;

for (var ix = ix_min; ix &lt; ix_max; ix += 1)
{
    var x_max = x_min + tile_width;
    var y_min = y_min_start;
    for (var iy = iy_min; iy &lt; iy_max; iy += 1)
    {
        var y_max = y_min+tile_height;
        
        var seed_off = ix + iy*tile_x;
        
        random_set_seed(seed + seed_off);
        var color = color_picker[irandom_range(0,array_length_1d(color_picker)-1)];
        random_set_seed(prev_seed + seed_off);
        var color_prev = color_picker[irandom_range(0,array_length_1d(color_picker)-1)];
        if (initial)
            color_prev = initial_color;
        
        /*
        // this was a mistake, but I thought the result looked kinda cool...
        draw_set_color(merge_color(color, color_prev, lerp_fac));
        */
        
        draw_set_color(merge_color(color_prev, color, lerp_fac));
        draw_rectangle(x_min, y_min, x_max, y_max, false);
        y_min += total_height;
    }
    x_min += total_width;
}

randomize();   // I can't tell if this is a bug, but the seed never advances
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_manager</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// initialize view variables

view_object[0] = id;
view_hborder[0] = view_wview[0] / 2;
view_vborder[0] = view_hview[0] / 2;

x = obj_player.x;
y = obj_player.y;

// constants

var f1x = .3*view_wview[0] / 2;
var f1y = .2*view_hview[0] / 2;
var f2x = .35*view_wview[0] / 2;
var f2y = .25*view_hview[0] / 2;

view_lock_top = -f1y;
view_lock_bottom = f1y;
view_lock_left = -f1x;
view_lock_right = f1x;

view_trigger_top = -f2y;
view_trigger_bottom = f2y;
view_trigger_left = -f2x;
view_trigger_right = f2x;

camera_speed = 10/60;
move_factor = 1 + .5;
next_pos_x = x;
next_pos_y = y;

prev_player_x = obj_player.x;
prev_player_y = obj_player.y;

l_lock = false;
r_lock = false;
t_lock = false;
b_lock = false;

h_lock_pos = 0;
v_lock_pos = 0;
h_lock_cam = 0;
v_lock_cam = 0;

camera_hints = ds_list_create();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// adjust camera position
var dx = obj_player.x - next_pos_x;
var dy = obj_player.y - next_pos_y;

var player_dx = obj_player.x - prev_player_x;
var player_dy = obj_player.y - prev_player_y;

if (!r_lock &amp;&amp; dx &lt; view_trigger_left)
{
    l_lock = false;
    r_lock = true;
    h_lock_cam = next_pos_x;
    h_lock_pos = view_trigger_left + h_lock_cam;
}
else if (!l_lock &amp;&amp; dx &gt; view_trigger_right)
{
    l_lock = true;
    r_lock = false;
    h_lock_cam = next_pos_x;
    h_lock_pos = view_trigger_right + h_lock_cam;
}

if (!b_lock &amp;&amp; dy &lt; view_trigger_top)
{
    t_lock = false;
    b_lock = true;
    v_lock_cam = next_pos_y;
    v_lock_pos = view_trigger_top + v_lock_cam;
}
else if (!t_lock &amp;&amp; dy &gt; view_trigger_bottom)
{
    t_lock = true;
    b_lock = false;
    v_lock_cam = next_pos_y;
    v_lock_pos = view_trigger_bottom + v_lock_cam;
}

var player_h_travel = obj_player.x - h_lock_pos;
var player_v_travel = obj_player.y - v_lock_pos;

if (l_lock &amp;&amp; dx &gt; view_lock_left)
    next_pos_x = min(obj_player.x - view_lock_left, max(next_pos_x, h_lock_cam + move_factor*player_h_travel))
else if (r_lock &amp;&amp; dx &lt; view_lock_right)
    next_pos_x = max(obj_player.x - view_lock_right, min(next_pos_x, h_lock_cam + move_factor*player_h_travel));
    
if (t_lock &amp;&amp; dy &gt; view_lock_top)
    next_pos_y = min(obj_player.y - view_lock_top, max(next_pos_y, v_lock_cam + move_factor*player_v_travel));
else if (b_lock &amp;&amp; dy &lt; view_lock_bottom)
    next_pos_y = max(obj_player.y - view_lock_bottom, min(next_pos_y, v_lock_cam + move_factor*player_v_travel));

if (obj_manager.kill_player)
{
    l_lock = false;
    r_lock = false;
    b_lock = false;
    t_lock = false;
    next_pos_x = obj_player.x;
    next_pos_y = obj_player.y;
}
    
x = lerp(x, next_pos_x, camera_speed);
y = lerp(y, next_pos_y, camera_speed);

prev_player_x = obj_player.x;
prev_player_y = obj_player.y;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// fix position based on hints

var width = view_wview[view_current];
var height = view_hview[view_current];

var sw = sprite_width / image_xscale;
var sh = sprite_height / image_yscale;

image_xscale = width / sw;
image_yscale = height / sh;

width /= 2; // easier math with radiuses
height /= 2;

width += 1; // tolerance
height += 1;

ds_list_clear(camera_hints);
InstancePlaceList(camera_hints, next_pos_x, next_pos_y, obj_camera_hint);
for (var i = 0; i &lt; ds_list_size(camera_hints); i++)
{
    var hint = ds_list_find_value(camera_hints,i);
    if (hint.bbox_top &lt; obj_player.y &amp;&amp; obj_player.y &lt; hint.bbox_bottom)
    {
        if (hint.keep_left &amp;&amp; obj_player.x &lt; hint.bbox_left)
            x = min(x, hint.bbox_left - width);
        if (hint.keep_right &amp;&amp; obj_player.x &gt; hint.bbox_right)
            x = max(x, hint.bbox_right + width);
    }
    if (hint.bbox_left &lt; obj_player.x &amp;&amp; obj_player.x &lt; hint.bbox_right)
    {
        if (hint.keep_above &amp;&amp; obj_player.y &lt; hint.bbox_top)
            y = min(y, hint.bbox_top - height);
        if (hint.keep_below &amp;&amp; obj_player.y &gt; hint.bbox_bottom)
            y = max(y, hint.bbox_bottom + height);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// clean up

ds_list_destroy(camera_hints);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// debug!! draw the view box
// mark as visible to draw

var pxout1 = x + view_lock_left;
var pxout2 = x + view_lock_right;
var pyout1 = y + view_lock_top;
var pyout2 = y + view_lock_bottom;

var pxin1 = x + view_trigger_left;
var pxin2 = x + view_trigger_right;
var pyin1 = y + view_trigger_top;
var pyin2 = y + view_trigger_bottom;


draw_line(pxout1,pyout1,pxout1,pyout2);
draw_line(pxout1,pyout1,pxout2,pyout1);
draw_line(pxout2,pyout2,pxout1,pyout2);
draw_line(pxout2,pyout2,pxout2,pyout1);
draw_line(pxin1,pyin1,pxin1,pyin2);
draw_line(pxin1,pyin1,pxin2,pyin1);
draw_line(pxin2,pyin2,pxin1,pyin2);
draw_line(pxin2,pyin2,pxin2,pyin1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

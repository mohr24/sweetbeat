<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_beat</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variable initialization

// constants?
bpm = 4;            // beats per measure
fpb = 60;           // frames per beat

// constants!
enum commands
{
    stall,
    blast,
    jump,
    
    none
}


// modify me
beats[0] = 0;
sequence[0] = commands.none;
beat_id = 0;
mark_kill_player = false;

// per beat
tick_beat = false;  // every beat
down_beat = false;  // first beat of the measure

cmd_stall = false;
cmd_blast = false;
cmd_jump = false;

kill_player = false;


// counter
counter = 0;
arr_counter = 0;


// create other components
instance_create(0,0,obj_audio);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// read check the timeline

// set all variable to false
cmd_stall = false;
cmd_blast = false;
cmd_jump = false;

// check for all actions (before this beat that haven't been processed yet)
while (arr_counter &lt; array_length_1d(beats) &amp;&amp; beats[arr_counter] &lt; counter / fpb)
{
    var action = sequence[arr_counter];
    switch(action)
    {
    case commands.stall:
        cmd_stall = true;
        break;
    case commands.blast:
        cmd_blast = true;
        break;
    case commands.jump:
        cmd_jump = true;
        break;
    default:    // none
        break;
    }
    arr_counter += 1;
}

tick_beat = counter % fpb == 0;
down_beat = counter == 0;

kill_player = mark_kill_player;
mark_kill_player = false;

// increment the counter
counter += 1;
if (counter == bpm*fpb)
{
    counter = 0;
    arr_counter = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>16,16</point>
    <point>16,16</point>
  </PhysicsShapePoints>
</object>

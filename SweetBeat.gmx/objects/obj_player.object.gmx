<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variable initialization

x_start = x;
y_start = y;

x_vel = 0;
y_vel = 0;

on_ground = false;

x_stick = 0;    // 8 point direction (center included)
y_stick = 0;
x_stick_square = 1; // 4 points not 8 (no center)
y_stick_square = 0;

grav_accel = 1;
move_accel = 1;
move_speed = 8;

max_speed = min(sprite_width,sprite_height);
jmp_vel = -20;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stall variables

in_stall = 0;

stall_length = .5 * obj_manager.fpb;  // half beat
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// jump variables

jmp_vel = -20;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///blast variables

in_blast = 0;

blast_knockback = -10;
blast_length = .125 * obj_manager.fpb;

my_blast = noone;

x_blast_offset = 0;//-(sprite_get_width(spr_player)-sprite_get_width(spr_blast))/2;
y_blast_offset = 0;//sprite_get_height(spr_player)/2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// player control

var horizontal_axis;
var vertical_axis;

var deadzone = .5;

// controller check
if (gamepad_is_connected(0))
{
    horizontal_axis = gamepad_axis_value(0, gp_axislh);
    vertical_axis = gamepad_axis_value(0, gp_axislv);
    
    // deadzone checks
    if (abs(horizontal_axis) &lt; deadzone)
        horizontal_axis = 0;
    if (abs(vertical_axis) &lt; deadzone)
        vertical_axis = 0;
}
else // keyboard check
{
    horizontal_axis = keyboard_check(vk_right) - keyboard_check(vk_left);
    vertical_axis = keyboard_check(vk_down) - keyboard_check(vk_up);
}

// variable updates
var x_vel_target = horizontal_axis * move_speed;
if (x_vel &gt; x_vel_target + move_accel)
    x_vel -= move_accel;
else if (x_vel &lt; x_vel_target - move_accel)
    x_vel += move_accel;
else
    x_vel = x_vel_target;
y_vel += grav_accel;
x_stick = clamp(horizontal_axis / deadzone, -1, 1); // -1, 0, or 1
y_stick = clamp(vertical_axis / deadzone, -1, 1);   // division by deadzone to make easy math
if (y_stick == 0)
{
    y_stick_square = 0;
    if (x_stick &lt; 0)
        x_stick_square = -1;
    else
        x_stick_square = 1;
}
else
{
    x_stick_square = 0;
    y_stick_square = y_stick;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// reset player position on death

if (obj_manager.kill_player)
{
    if (obj_manager.beat_id == 0)
    {
        x = x_start;
        y = y_start;
    }
    else
    {
        x = obj_manager.beat_id.x;
        y = obj_manager.beat_id.y;
    }
    x_vel = 0;
    y_vel = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// jump action
if (obj_manager.cmd_jump)
    y_vel = jmp_vel;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// stall action

if (obj_manager.cmd_stall){
    in_stall = stall_length;
    show_debug_message('stall');
}
    
if (in_stall &gt; 0)
{
    x_vel /= 2;
    y_vel = 0;
    in_stall -= 1;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///blast action

if (obj_manager.cmd_blast){
    in_blast = blast_length;
    my_blast = instance_create(x+x_blast_offset,y+y_blast_offset,obj_player_blast);
    blast_x_stick = x_stick_square;
    blast_y_stick = y_stick_square;
    if (blast_y_stick != 0)
        my_blast.image_angle = 0;
    else
        my_blast.image_angle = 90;
    if (blast_y_stick != 0)
        y_vel = blast_y_stick*blast_knockback;
    else
        x_vel = blast_x_stick*blast_knockback;
    show_debug_message('blast');
}
    
    
    
if (in_blast &gt; 0)
{
    var blast_width = my_blast.sprite_width;
    var sx1 = x + blast_y_stick*blast_width/2;
    var sy1 = y + blast_x_stick*blast_width/2;
    var sx2 = x - blast_y_stick*blast_width/2;
    var sy2 = y - blast_x_stick*blast_width/2;
    var dx = blast_x_stick*window_get_width();
    var dy = blast_y_stick*window_get_height();
    while(dx*blast_x_stick &gt; 0 || dy*blast_y_stick &gt; 0)
    {
        var c1 = collision_line(sx1,sy1,sx1+dx,sy1+dy,obj_solid_parent,false,true);
        if (c1 == noone)
            break;
        var c2 = collision_line(sx2,sy2,sx2+dx,sy2+dy,obj_solid_parent,false,true);
        if (c2 == noone)
            break;
        var c1x = blast_x_stick*(c1.x-blast_x_stick*(1+c1.sprite_width/2));
        var c1y = blast_y_stick*(c1.y-blast_y_stick*(1+c1.sprite_height/2));
        var c2x = blast_x_stick*(c2.x-blast_x_stick*(1+c2.sprite_width/2));
        var c2y = blast_y_stick*(c2.y-blast_y_stick*(1+c2.sprite_height/2));
        dx = blast_x_stick*(max(c1x,c2x) - blast_x_stick*x);
        dy = blast_y_stick*(max(c1y,c2y) - blast_y_stick*y);
    }
    if (blast_y_stick != 0)
        my_blast.image_yscale = dy + blast_y_stick*2;
    else
        my_blast.image_yscale = dx + blast_x_stick*2;
    in_blast -= 1;
    my_blast.x=x+x_blast_offset;
    my_blast.y=y+y_blast_offset;
}else if (my_blast != noone)
{
    with(my_blast){
        instance_destroy();
    }
    my_blast = noone;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// player movement and collision triggering

x_vel = clamp(x_vel, -max_speed, max_speed);
y_vel = clamp(y_vel, -max_speed, max_speed);

if (place_meeting(x + x_vel, y, obj_solid_parent))
{
    while (!place_meeting(x + sign(x_vel), y, obj_solid_parent))
        x += sign(x_vel);
    var wall = instance_place(x + sign(x_vel), y, obj_solid_parent);
    with (wall)
        event_perform(ev_collision, obj_player); // register a collision event (wouldn't happen normally since we stop before it)
    x_vel = 0;
}
else
    x += x_vel;

on_ground = false;
if (place_meeting(x, y + y_vel, obj_solid_parent))
{
    if (y_vel &gt; 0)
        on_ground = true;
    while (!place_meeting(x, y + sign(y_vel), obj_solid_parent))
        y += sign(y_vel);
    var wall = instance_place(x, y + sign(y_vel), obj_solid_parent);
    with (wall)
        event_perform(ev_collision, obj_player); // register a collision event (wouldn't happen normally since we stop before it)
    y_vel = 0;
}
else
    y += y_vel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>32,32</point>
    <point>32,32</point>
  </PhysicsShapePoints>
</object>
